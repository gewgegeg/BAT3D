"""
Django settings for bat3d project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables
# Явно указываем путь к .env файлу относительно BASE_DIR (корень папки backend)
# и используем override=True
dotenv_path = Path(__file__).resolve().parent.parent / '.env' # BASE_DIR / '.env'
if dotenv_path.exists():
    load_dotenv(dotenv_path=dotenv_path, override=True)
    # print(f"[DEBUG DOTENV] Загружен .env файл из: {dotenv_path}")
else:
    # print(f"[DEBUG DOTENV] .env файл НЕ НАЙДЕН по пути: {dotenv_path}. Переменные окружения могут быть не загружены.")
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS_str = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
# Инициализируем список из строки, удаляя пробелы
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_str.split(',') if host.strip()]

# Добавляем домены для Beget и Amvera, если их еще нет в списке
# Добавлен технический домен Beget и общий для Amvera
beget_domains = [ 'bat3d.ru', 'www.bat3d.ru', 'saharmyka.beget.tech', '.amvera.io'] 
for domain in beget_domains:
    if domain not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(domain)

# Добавляем хост из переменной окружения TUNNEL_HOST, если он задан
TUNNEL_HOST = os.getenv('TUNNEL_HOST')
if TUNNEL_HOST:
    # print(f"[DEBUG SETTINGS] TUNNEL_HOST из .env: '{TUNNEL_HOST}'")
    if TUNNEL_HOST not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(TUNNEL_HOST)
else:
    # print("[DEBUG SETTINGS] TUNNEL_HOST не найден в .env")
    pass

# Удаляем старые жестко прописанные хосты localtunnel, если они там были
# ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host != 'tough-pandas-study.loca.lt']

# Убираем дубликаты и пустые строки еще раз на всякий случай, сортируем
ALLOWED_HOSTS = sorted(list(set(host for host in ALLOWED_HOSTS if host)))
# print(f"[DEBUG SETTINGS] Итоговый ALLOWED_HOSTS: {ALLOWED_HOSTS}")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'djoser',
    'storages',
    
    # Local apps
    'products',
    'orders',
    'users',
    'cart',
    'payments',
    'inquiries',
    'site_settings',
    'reviews',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bat3d.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bat3d.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# PostgreSQL Configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# MySQL Configuration (Using environment variables from .env for Beget)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('DB_NAME_MYSQL'),
#         'USER': os.getenv('DB_USER_MYSQL'),
#         'PASSWORD': os.getenv('DB_PASSWORD_MYSQL'),
#         'HOST': os.getenv('DB_HOST_MYSQL'),
#         'PORT': os.getenv('DB_PORT_MYSQL'),
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#             'charset': 'utf8mb4',
#         },
#     }
# }

# MySQL Configuration (Commented out)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'saharmyka_bat3d',         # Имя твоей базы данных
#         'USER': 'saharmyka_bat3d',         # Имя пользователя базы данных (такое же, как имя БД на Beget)
#         'PASSWORD': 'Kk!082897091', # Пароль от MySQL на Beget
#         'HOST': 'localhost',              # Хост базы данных (localhost для Beget)
#         'PORT': '',                      # Оставь пустым для стандартного порта (3306)
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Изменено на 'staticfiles'

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 12
}

# CORS settings
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

# Stripe settings
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

# YooKassa settings
# Возвращаем использование os.getenv()
# yookassa_shop_id_val = "1092551" # Убираем хардкод
# yookassa_secret_key_val = "test_jyXh07k5V2wM9ur9DivcYwcUYaIQi7-2qHLqjzQRs" # Убираем хардкод

yookassa_shop_id_val = os.getenv('YOOKASSA_SHOP_ID')
yookassa_secret_key_val = os.getenv('YOOKASSA_SECRET_KEY')

# ОТЛАДОЧНЫЙ PRINT ЗНАЧЕНИЙ ПЕРЕД КОНФИГУРАЦИЕЙ
# print(f"[DEBUG YOOKASSA KEYS] Перед Configuration.configure: SHOP_ID='{yookassa_shop_id_val}', SECRET_KEY='{yookassa_secret_key_val}'")

# Используем переменные в условии и при конфигурации
if yookassa_shop_id_val and yookassa_secret_key_val:
    from yookassa import Configuration
    Configuration.configure(yookassa_shop_id_val, yookassa_secret_key_val)
    
    # Убираем старый отладочный принт или комментируем его
    # print(f"[DEBUG YOOKASSA] Конфигурация YooKassa ВЫПОЛНЕНА с shopId: {yookassa_shop_id_val[:5]}... и secretKey: {yookassa_secret_key_val[:10]}...") 
    
    # Опционально: передача данных о фреймворке для статистики ЮKassa
    # try:
    #     import django
    #     from yookassa.domain.common.user_agent import Version
    #     Configuration.configure_user_agent(
    #         framework=Version('Django', django.get_version()),
    #     )
    # except ImportError:
    #     # Django не импортирован или версия не может быть определена
    #     print("ПРЕДУПРЕЖДЕНИЕ: Не удалось определить версию Django для YooKassa User-Agent.")
    # except Exception as e:
    #     print(f"ПРЕДУПРЕЖДЕНИЕ: Ошибка при конфигурации YooKassa User-Agent: {e}")
else:
    print("ПРЕДУПРЕЖДЕНИЕ: Ключи YOOKASSA_SHOP_ID или YOOKASSA_SECRET_KEY не найдены в переменных окружения (проверено после load_dotenv с override=True). SDK ЮKassa не сконфигурирован.")

# Список доверенных IP-сетей YooKassa для проверки вебхуков
# Источник: https://yookassa.ru/docs/support/technical-faq/notifications (секция "С каких IP-адресов приходят запросы?")
# Обновлено 23.05.2025
YOOKASSA_TRUSTED_IP_NETWORKS = [
    '185.71.76.0/27',
    '185.71.77.0/27',
    '77.75.153.0/25',
    '77.75.154.224/27',
    '77.75.156.11/32',
    '77.75.156.35/32',
    '2a02:5180::/32' # IPv6 адреса YooKassa
]

# JWT settings
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# Djoser settings
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': False, # Установите True, если хотите отправлять письма активации
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'SERIALIZERS': {
        'user_create': 'users.serializers.UserCreateSerializer', # Ваш сериализатор для создания пользователя
        'user': 'users.serializers.UserSerializer',             # Ваш основной сериализатор пользователя
        'current_user': 'users.serializers.UserSerializer',     # Ваш основной сериализаator для эндпоинта /me/
        # 'user_delete': 'djoser.serializers.UserDeleteSerializer', # Можно оставить по умолчанию или создать свой
    },
    'LOGIN_FIELD': 'email', # У вас USERNAME_FIELD = 'email' в модели CustomUser
    'USER_ID_FIELD': 'id', # Поле ID пользователя в модели
    'HIDE_USERS': False, # True, если не хотите, чтобы список пользователей был доступен (по умолчанию True для IsAuthenticated)
    # 'PERMISSIONS': { # Можно более тонко настроить права доступа, если нужно
    #     'user_list': ['rest_framework.permissions.IsAdminUser'],
    # }
}

# Email settings (Console backend for development)
# TODO: Configure a real SMTP server for production
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@bat3d.shop' # Или ваш домен
SERVER_EMAIL = 'admin-errors@bat3d.shop' # Email для системных ошибок
ADMINS = [('Admin Name', 'your_admin_email@example.com')] # TODO: Замените на реальный email администратора
MANAGERS = ADMINS # Уведомления об ошибках 404 и т.д. (если DEBUG=False)
EMAIL_SUBJECT_PREFIX = '[BAT3D Shop] ' # Префикс для тем писем

# Site URL and Domain (used in emails, etc.)
# For local development, assuming frontend runs on port 3000
SITE_DOMAIN = os.getenv('SITE_DOMAIN', 'localhost:3000')
SITE_URL = os.getenv('SITE_URL', f"http://{SITE_DOMAIN}")

# TODO: For production, set SITE_DOMAIN and SITE_URL via .env to your actual domain
# e.g., SITE_DOMAIN=bat3d.shop and SITE_URL=https://bat3d.shop

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Используем простой форматтер для консоли
            'level': 'DEBUG', 
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'cart': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # При необходимости можно раскомментировать для отладки других приложений
        # 'backend.products': {
        # 'handlers': ['console'],
        # 'level': 'DEBUG',
        # 'propagate': False,
        # },
    },
    # Можно настроить корневой логгер, если нужно видеть все DEBUG сообщения ото всех логгеров
    # (включая сторонние библиотеки, что может быть очень шумно)
    # 'root': {
    # 'handlers': ['console'],
    # 'level': 'DEBUG',
    # },
}
